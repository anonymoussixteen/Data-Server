<?php

error_reporting(0);
unlink('.img');
$red    = "\033[1;31;40m";
$green  = "\033[1;32;40m";
$yellow = "\033[1;33;40m";
$blue   = "\033[1;34;40m";
$purple = "\033[1;35;40m";
$cyan   = "\033[1;36;40m";
$white  = "\033[1;37;40m";
$red    = "\033[1;31;40m";
$grey   = "\033[1;30;40m";
$mono   = "\033[2;37;40m";
$emono  = "\033[0;37;40m";
$italic = "\033[3;37;40m";
$etalic = "\033[0;37;40m";
$reset  = $white;
$host   = "litepick.io";
date_default_timezone_set('Africa/Harare');

$bot_info = [
    "" => "\n\n\n",
    "script" => "$host",
    "link" => "None",
    "tutor" => "None",
    "version" => "1.1",
    "Creator Message" => "By usage, you assume all risk."
];

try {
    system('clear'); // For Linux/Mac
    //system('cls'); // For Windows
    sleep(1);
    foreach ($bot_info as $key => $value) {
        if ($key == "") {
            echo $value;
        } else {
            echo ucfirst($key) . ": $value\n";
        }
    }
    echo "\n";
    sleep(5);
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
} catch (Exception $e) {
    if ($e instanceof KeyboardInterrupt) {
        exit('Response: Exit Command Received');
    } else {
        echo "An error occurred: " . $e->getMessage();
    }
}
class KeyboardInterrupt extends Exception {}


function curl($url, $post = 0, $httpheader = 0, $proxy = 0){ // url, postdata, http headers, proxy, uagent
 while (true){
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
   curl_setopt($ch, CURLOPT_TIMEOUT, 60);
   curl_setopt($ch, CURLOPT_COOKIE,TRUE);
   curl_setopt($ch, CURLOPT_COOKIEFILE,"cookie.txt");
   curl_setopt($ch, CURLOPT_COOKIEJAR,"cookie.txt");
   if($post){
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    }
    if($httpheader){
      curl_setopt($ch, CURLOPT_HTTPHEADER, $httpheader);
    }
    if($proxy){
      curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, true);
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
      // curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    }
    curl_setopt($ch, CURLOPT_HEADER, true);
    $response = curl_exec($ch);
    $httpcode = curl_getinfo($ch);
    if(!$httpcode) return "Curl Error : ".curl_error($ch); else{
     $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     $body = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     curl_close($ch);
     if ($body == "") {
          echo "\rPlease Check Your Connection \r"; continue;} else { echo "                             \r";
          return array($header, $body);}
    }
  }}


function countdown($t) {
    while ($t > 0) {
        $mins = floor($t / 60);
        $secs = $t % 60;
        $timer = sprintf('%02dm:%02ds', $mins, $secs);
        $now = date('H:i:s'); //'H:i:s'
        echo "\r @[$now] left: $timer  \r";
        sleep(1);
        $t--;
    }
}

function Slow($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }
function Slo($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }

function Sav($namadata){
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
            }else{
                   usleep(1.5);
                   system("clear");
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
                 }
            return $data;
                 }

function Save($namadata)
   {
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
        }else{
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
             }
         return $data;
   }

function banner($name)
         {
           global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
           echo "\n\rSIMPLE BOTS AND AUTO CLICKERS by 16(sixteen)";
           echo "\n\r$name AUTO BOT PYTHON-PHP SCRIPT";
	}

function timer($timer){
      $tim = time()+$timer;
      while(true):
        echo "\r                          \r";$wsl=$wrn[$i];
        $tm = $tim-time();
        $date=date("i:s",$tm);
        if($tm<1){
          break;
        }
      endwhile;
    }

function load($data, $file)
         {
           $handle = fopen($file, 'w');fwrite($handle, $data);
           fclose($handle);
         }


$user=Sav($host."_USERAGENT");
$cookie=Sav($host."_COOKIE");
$apikey=Sav("Apikey");

$headers = [
            "Host: $host",
            "x-requested-with:XMLHttpRequest",
            "referer: https://".$host."/faucet.php",
            "user-agent: $user",
            "accept: */*", //*/
            "cookie: $cookie",
           ];

function captcha($apikey, $sitekey, $url) {
    $apiUrl= "https://api.sctg.xyz/in.php?key=$apikey&method=turnstile&pageurl=$url&sitekey=$sitekey";

    $headers= [];
    $data = curl($apiUrl, 0, $headers)[1];
    if (strpos($data, "ERROR_WRONG_USER_KEY") !== false) {
        echo("Error: Wrong Multi Bot Api-Key\n");
        exit;
    }

    preg_match("/OK\|(\w+)/", $data, $matches);
    $id = $matches[1];

    $waitsec = rand(18, 25);
    countdown($waitsec);

    for ($t = 0; $t < 10; $t++) {
        $data = curl("https://api.sctg.xyz/res.php?key=$apikey&id=$id&action=get", 0, $headers)[1];

        if (strpos($data, "OK|") !== false) {
            echo("\r Captcha Status: OK. \r");
            sleep(2);
            preg_match("/OK\|(.*)/", $data, $matches);
            return $matches[1];
        } elseif (strpos($data, "CAPCHA_NOT_READY") !== false) {
            countdown(rand(5, 15));
        } else {
            //echo "Error: $data\n";
            break;
        }
    }
}

function filter_users(){
         global $headers, $currency, $host;
         $headerz= [];
         $url= "https://$host/affiliates.php";
         $data= curl($url, 0, $headers)[1];
         $users= curl("https://raw.githubusercontent.com/sixteen-crypto/Data-Server/refs/heads/main/litepickrefs", 0, $headerz)[0];
         $user= explode('value="https://'.$host.'/?ref=', explode('" readonly="readonly">', $data)[0])[1];
         echo "User: $user\n";
         if (strpos($users, $user) !== false) {
            // User exists in the list
            return;
        } elseif ($user === 'masterrashy') {
            // User is masterrashy
            return;
        } else {
            // Access denied
            echo "Access Denied You Did not Use Script Creator Ref\n";
            echo "Ref: \033[36mhttps://$host/?ref=masterrashy\033[0m\n";
            echo "Register With Link and Use That Account\n";
            exit();
        }
    }


function login(){
         global $headers, $currency, $host;
         $url= "https://".$host."/faucet.php";
         $data= curl($url, 0, $headers)[1];
         $username= explode('Hello ', explode('. Welcome back!', $data)[0])[1];
         if ($username == ""){
             echo "Bad User Data\n";
             unlink($host."_USERAGENT");
             unlink($host."_COOKIE");
             exit;}
         $percent= explode('aria-valuemax="100">', explode('</div></div>', $data)[0])[1];
         $balance= explode('<span class="user_balance">', explode('</span> LTC</div>', $data)[0])[1];
         $level= explode('<div style="float: left">', explode('</div><div style="float: right', $data)[0])[1];
         $x= date("H:i:s");

         banner("Litepick");
         echo ("\n\n\rUser: ".$username."\n");
         echo ("\rBalance: ".$balance." LTC \n");
         echo ("\rWager Progress: $level [$percent]\n");
         echo str_repeat("—", 49)."\n";
         //echo $data;
         //exit;
         }


function faucet(){
         global $headers, $host, $apikey, $user, $cookie;
         while (true){
              $url= "https://".$host."/faucet.php";
              $request= curl($url, 0, $headers);
              $data= $request[1];

              $payload= explode('data: "action=claim_hourly_faucet', explode('+getCookie("_ft")', $data)[0])[1];
              $cblt= explode('&g-recaptcha-response="+g_r', $payload)[0];

              $percent= explode('aria-valuemax="100">', explode('</div></div>', $data)[0])[1];
              $level= explode('<div style="float: left">', explode('</div><div style="float: right', $data)[0])[1];
              $progress= "[$level >> $percent]";

              $sitekey= explode('<div class="cf-turnstile" style="margin-top: 20px" data-sitekey="', explode('" data-theme="light"></div>', $data)[0])[1];
              $cookies= $request[0];

              try {
                       $secs= explode('$("input[type=radio][name=faucet_type]").on("change", change_faucet_type);
				show_countdown_clock(', explode(".then(r => r.text())", $data)[0])[1];
                       $secs= explode(');', $secs)[0];
                       countdown($secs);
                       //foreach (range(0, $secs) as $i) {reward_increaser(.0001, $progress);}
                  } catch (Exception $e) {}

	         $headers = [
	            "Host: $host",
	            "x-requested-with:XMLHttpRequest",
	            "user-agent: $user",
	            "accept: */*", //*/
	            "referer: https://$host/faucet.php",
	            "content-type: application/x-www-form-urlencoded; charset=UTF-8",
	            "cookie: $cookie",
		           ];

	         //$seconds= explode('', explode('', $data)[0])[1];
	         //explode('', explode('', $data)[0])[1];
	         $csrf_token= explode('csrf_cookie_name=', explode('; expires=', $cookies)[0])[1];
	         $recaptcha= captcha($apikey, $sitekey, $url);
	         $payload= "action=claim_hourly_faucet$cblt&g-recaptcha-response=null&h-captcha-response=null&captcha=&c_captcha_response=$recaptcha&ft=&csrf_test_name=$csrf_token";
	         if ($recaptcha == "") {continue;}
                 else {

	                $url= "https://$host/process.php";
	                $request= curl($url, $payload, $headers);
	                $reqdata= $request[1];

   	                $cookies= $request[0];
	                $resdata= json_decode($reqdata, true);

	                if ($resdata['ret'] == 1) {
	                     $x = date('H:i:s');
	                     $number = $resdata['num'];
	                     $won = $resdata['mes'];
	                     $balance = $resdata['balance'];

	                     echo "\r$x - Lucky Number: $number   \n";
	                     echo "         - Won: $won   \n";
	                     echo "         - Level $progress   \n";
	                     echo "         - Balance: " . number_format($balance / 100000000, 8) . "   \n";
	                     echo str_repeat('—', 47) . "\n";}

	                elseif ($resdata['ret'] == 0) {
	                     $msg= $resdata['mes'];
	                     $x = date('H:i:s');
                             //echo "\r$x - Error: $msg\n";
	                     if (strpos($msg, "Please try again in 10 minutes") !== false){
	                         countdown(610);
	                        }}
	                 else {
	                        $x = date('H:i:s');
	                        //echo "\r$x - Error2: $reqdata\n";
		                   }}
		                     	}}


function reward_increaser($wager) {
    global $host, $apikey, $cookie, $user, $headers;
    global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
    // echo "\r" . str_pad('Roll Number', 18, ' ', STR_PAD_RIGHT) . "|" . str_pad('Profit/Loss', 18, ' ', STR_PAD_RIGHT) . "|" . str_pad('Balance', 18, ' ', STR_PAD_RIGHT) . "\n";
    // echo str_repeat('-', 45) . "\n";

    $current_wager = $wager;
    $last_result = null;
    $url = "https://$host/dice.php";
    $request = curl($url, 0, $headers);

    $data= $request[1];
    $cookies = $request[0];

    while (true) {
            $csrf_token= explode('csrf_cookie_name=', explode('; expires=', $cookies)[0])[1];

            $choices = array('high', 'low');
            $bet = $choices[array_rand($choices)];

            $headers = [
                        "Host: $host",
                        "x-requested-with:XMLHttpRequest",
                        "user-agent: $user",
                        "accept: */*", //*/
                        "referer: https://$host/dice.php",
                        "content-type: application/x-www-form-urlencoded; charset=UTF-8",
                        "cookie: $cookie",
                       ];

            $payload = 'action=bet_game_dice&bet_amount='.$current_wager.'&payout=2&bet_on='.$bet.'er&csrf_test_name='.$csrf_token;
            $url = "https://$host/process.php";
            $posdata= curl($url, $payload, $headers);
            $resdata= $posdata[1];
            $cookies= $posdata[0];

            if (strpos($resdata, '{"ret":1') !== false){

                $number = explode('"num":"', explode('","amount":', $resdata)[0])[1];
                $lowi = explode('"amount":', explode(',"balance"', $resdata)[0])[1];
                $balance = explode(',"balance":', explode(',"bet_data":', $resdata)[0])[1];
                if (is_numeric($lowi) && floatval($lowi) > -1 ) {
                       echo "\r " . $green . str_pad($number, 6, ' ', STR_PAD_LEFT) . $reset . " | " . str_pad($lowi, 10, ' ', STR_PAD_LEFT) . " |    " . $cyan . number_format(intval($balance) / 100000000, 8) . $reset . "\n";
                       $current_wager = $wager;
                       $last_result = 'win';
                       //sleep(2);
                   } else {
                       echo "\r " . $red . str_pad($number, 6, ' ', STR_PAD_LEFT) . $reset . " | " . str_pad($lowi, 10, ' ', STR_PAD_LEFT) . " |    " . $cyan . number_format(intval($balance) / 100000000, 8) . $reset . "\n";
                       $current_wager *= 2;
                       $last_result = 'loss';
                       //sleep(1);
                } usleep(100000);  //500000);    //70000);
            }}


   }


function choose_action() {
    echo "Choose an action:\n";
    echo "1. Wagering\n";
    echo "2. Faucet\n";
    echo "Enter Number (1-2): ";
    $choice = trim(fgets(STDIN));
    system('clear');
    unlink('cookie.txt');

    if ($choice == '1') {
        login();
        echo "Amount for Wager eg (0.00000001)\nDo not Use Big Amount Over 0.00000005\n";
        echo "Enter Amount: ";
        $amount = trim(fgets(STDIN));
        if ($amount > 0.00000005){
            echo "Amount Exceeded Wagering Expectations.\n"; exit;}
        reward_increaser($amount);
    } elseif ($choice == '2') {
        login(
