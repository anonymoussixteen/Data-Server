<?php

error_reporting(0);
unlink('.img');
$red    = "\033[1;31;40m";
$green  = "\033[1;32;40m";
$yellow = "\033[1;33;40m";
$blue   = "\033[1;34;40m";
$purple = "\033[1;35;40m";
$cyan   = "\033[1;36;40m";
$white  = "\033[1;37;40m";
$red    = "\033[1;31;40m";
$grey   = "\033[1;30;40m";
$mono   = "\033[2;37;40m";
$emono  = "\033[0;37;40m";
$italic = "\033[3;37;40m";
$etalic = "\033[0;37;40m";
$reset  = $white;
$host   = "earnbitmoon.club";
date_default_timezone_set('Africa/Harare');

$bot_info = [
    "" => "\n\n\n",
    "script" => "EARNBITMOON",
    "link" => "earnbitmoon.club",
    "tutor" => "None",
    "version" => "1.1",
    "Creator Message" => "By usage, you assume all risk."
];

try {
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
    sleep(2);
    foreach ($bot_info as $key => $value) {
        if ($key == "") {
            echo $value;
        } else {
            echo ucfirst($key) . ": $value\n";
        }
    }
    echo "\n";
    sleep(5);
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
} catch (Exception $e) {
    if ($e instanceof KeyboardInterrupt) {
        exit('Response: Exit Command Received');
    } else {
        echo "An error occurred: " . $e->getMessage();
    }
}

class KeyboardInterrupt extends Exception {}


function curl($url, $post = 0, $httpheader = 0, $proxy = 0){ // url, postdata, http headers, proxy, uagent
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
   curl_setopt($ch, CURLOPT_TIMEOUT, 60);
   curl_setopt($ch, CURLOPT_COOKIE,TRUE);
   curl_setopt($ch, CURLOPT_COOKIEFILE,"cookie.txt");
   curl_setopt($ch, CURLOPT_COOKIEJAR,"cookie.txt");
   if($post){
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    }
    if($httpheader){
      curl_setopt($ch, CURLOPT_HTTPHEADER, $httpheader);
    }
    if($proxy){
      curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, true);
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
      // curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    }
    curl_setopt($ch, CURLOPT_HEADER, true);
    $response = curl_exec($ch);
    $httpcode = curl_getinfo($ch);
    if(!$httpcode) return "Curl Error : ".curl_error($ch); else{
     $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     $body = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     curl_close($ch);
     return array($header, $body);
    }
  }

function get($link,$header)
         {
           $ch = curl_init();
           curl_setopt_array($ch, [ CURLOPT_URL => $link,
                                    CURLOPT_FOLLOWLOCATION => 1,
                                    CURLOPT_RETURNTRANSFER => 1,
                                    CURLOPT_HTTPHEADER => $header,
                                    CURLOPT_SSL_VERIFYPEER => 0
                                  ]
                            );
           $data = curl_exec($ch);
           curl_close($ch);
           return($data);
         }

function post($link,$header,$request)
         {
          $ch = curl_init();
          curl_setopt_array($ch, [ CURLOPT_URL => $link,
                                   CURLOPT_RETURNTRANSFER => true,
                                   CURLOPT_FOLLOWLOCATION => true,
                                   CURLOPT_CUSTOMREQUEST => "POST",
                                   CURLOPT_POSTFIELDS => $request,
                                   CURLOPT_HTTPHEADER => $header,
                                 ]
                           );
          $post = curl_exec($ch);
          curl_close($ch);
          return($post);
         }

function countdown($t) {
    while ($t > 0) {
        $mins = floor($t / 60);
        $secs = $t % 60;
        $timer = sprintf('%02dm:%02ds', $mins, $secs);
        $now = date('H:i:s'); //'H:i:s'
        echo "\r @[$now] left: $timer  \r";
        sleep(1);
        $t--;
    }
}

function Slow($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }
function Slo($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }

function Sav($namadata){
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
            }else{
                   usleep(1.5);
                   system("clear");
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
                 }
            return $data;
                 }

function Save($namadata)
   {
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
        }else{
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
             }
         return $data;
   }

function timer($timer){
      $tim = time()+$timer;
      while(true):
        echo "\r                          \r";$wsl=$wrn[$i];
        $tm = $tim-time();
        $date=date("i:s",$tm);
        if($tm<1){
          break;
        }
      endwhile;
    }

function load($data, $file)
         {
           $handle = fopen($file, 'w');fwrite($handle, $data);
           fclose($handle);
         }


$user=Sav("User-agent");
$cookie=Sav("Cookie");
$headers = [
            "Host: earnbitmoon.club",
            "x-requested-with:XMLHttpRequest",
            "origin: https://earnbitmoon.club",
            "user-agent: $user",
            "accept: */*", //*/
            "referer: https://earnbitmoon.club/",
            "cookie: $cookie",
           ];


function captchasolver($captcha)
         { global $user, $cookie;
          $header0 = [
               "Host: earnbitmoon.club",
               "x-requested-with:XMLHttpRequest",
               "content-type: multipart/form-data; boundary=------WebKitFormBoundaryPvNIrj9zw1N1kh5O",
               "origin: https://earnbitmoon.club",
               "user-agent: $user",
               "accept: */*", //*/
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                        ];

          $header1 = [
               "Host: earnbitmoon.club",
               "content-type: multipart/form-data; boundary=----WebKitFormBoundaryPXIjpA5uCgwszbBB",
               "x-requested-with:XMLHttpRequest",
               "origin: https://earnbitmoon.club",
               "user-agent: $user",
               "accept: */*", //*/
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                         ];

          $header2 = [
               "Host: earnbitmoon.club",
               "user-agent: $user",
               "accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",
               "referer: https://earnbitmoon.club/",
               "cookie: $cookie",
                        ];

          $url = "https://earnbitmoon.club/system/libs/captcha/request.php";
          $payload = '------WebKitFormBoundaryPXIjpA5uCgwszbBB
Content-Disposition: form-data; name="payload"


eyJpIjoxLCJhIjoxLCJ0IjoiZGFyayIsInRzIjoxNjg3NDgzNDg5MjE3fQ==
------WebKitFormBoundaryPXIjpA5uCgwszbBB--';
          $data = post($url,$header1,$payload);
          if (strpos($data, 'error') !== false) {
              $js = json_decode($data, true);
              $sec = $js["data"];
              $refresher=sleep(($sec/1000)+15);
                                                 }

          $showbypass = captchashow();
          $link = "https://earnbitmoon.club/system/libs/captcha/request.php?payload=eyJpIjoxLCJ0cyI6MTY4NzQ4MzQ5MDIzM30=";
          $data = get($link,$header2);

          $payload = base64_encode('{"i":1,"x":'.explode(",",$captcha)[0].',"y":'.explode(",",$captcha)[1].',"w":'.explode(",",$captcha)[2].',"a":2,"ts":'.round(microtime(true))*1000 .'}');
          $link = "https://earnbitmoon.club/system/libs/captcha/request.php";
          $request = '--------WebKitFormBoundaryPvNIrj9zw1N1kh5O
Content-Disposition: form-data; name="payload"


'.$payload.'
--------WebKitFormBoundaryPvNIrj9zw1N1kh5O--';
          $data = post($link,$header0,$request);
        }

function banner($name)
         { global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
           echo "\n\rSIMPLE BOTS AND AUTO CLICKERS by 16(sixteen)";
           echo "\n\r$name AUTO FAUCET PYTHON-PHP SCRIPT";
}

function captcha()
         {
          $captcha[] = "17,13,320";
          $captcha[] = "113,23,320";
          $captcha[] = "142,37,320";
          $captcha[] = "220,30,320";
          $captcha[] = "296,19,320";
          $captcha[] = "278,33,314.824";
          return($captcha);
         }

function balance(){
         global $headers ,$red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset, $url;
         $data = get($url, $headers);
         $balance = explode('</b></div></div>',explode('<div class="text-success"><b>',$data)[1])[0];
         $balance2 = explode('<b id="sidebarCoins">',explode('</b></div></div>',$data)[0])[1];
         echo slow ("\r         - Balance: $balance     \n");
         echo str_repeat("—", 47)."\n";
         }

function captchashow(){
         global $headers ,$red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
         echo "Bypassing Captcha.                  \r";
         sleep(2);
         echo "                                     \r";}

function dailyreward(){
         global $headers ,$red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
         $data = get("https://earnbitmoon.club/system/ajax.php?a=dailyBonus", $headers);
         $reward = explode('You successfully received ', explode(' Coins', $data)[0])[1];
         if(strpos($data, 'Coins') !== false){
            $x = date("H:i:s");
            echo slow ("\rDaily bonus: $reward Coins!    \n");
            balance();}
         }

main:
system("clear");

$url = "https://earnbitmoon.club/";
$host = "earnbitmoon.club";

function login($url, $host){
         global $headers;
         $data = get($url, $headers);
         $balance = explode('</b></div></div>',explode('<div class="text-success"><b>',$data)[1])[0];
         $balance2 = explode('<b id="sidebarCoins">',explode('</b></div></div>',$data)[0])[1];
         banner("EARNBITMOON");
         echo slow("\n\nBalance: ".$balance." / ".$balance2."\n");
         echo str_repeat("—", 47)."\n";
         dailyreward();}


function faucet($url, $host){
         global $headers ,$red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
         $data = get($url, $headers);
         $millisec = explode('("#claimTime").countdown(', explode(", {elapse: true}", $data)[0])[1];
         if($millisec):
            countdown($millisec/1000-round(microtime(true))+rand(2,5));
         endif;
         $token = explode("'", explode("var token = '", $data)[1])[0];
         foreach(captcha() as $captcha)
                {
                  captchasolver($captcha);
                  $url = "https://earnbitmoon.club/system/ajax.php";
                  $payload = "a=getFaucet&token=$token&captcha=3&challenge=false&response=false&ic-hf-id=1&ic-hf-se=$captcha&ic-hf-hp=";
                  $data = post($url,$headers,$payload);
                  $js = json_decode(strip_tags($data),true);
                  if($js["status"] == 200){
                     $number = explode('"number":', explode(',"reward":', $data)[0])[1];
                     $reward = explode('!', explode("and you won ", $data)[1])[0];
                     $x = date("H:i:s");
                     echo slow("\r$x - Lucky number: $number \n");
                     echo slow("\r         - Coin: $reward!    \n");
                     balance();
                     countdown(5*60);}
                }
                            }

login($url, $host);
while (true) {faucet($url, $host);}

ptc:
?>



