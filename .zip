<?php

error_reporting(0);
//unlink('.img');
$red    = "\033[1;31;40m";
$green  = "\033[1;32;40m";
$yellow = "\033[1;33;40m";
$blue   = "\033[1;34;40m";
$purple = "\033[1;35;40m";
$cyan   = "\033[1;36;40m";
$white  = "\033[1;37;40m";
$red    = "\033[1;31;40m";
$grey   = "\033[1;30;40m";
$mono   = "\033[2;37;40m";
$emono  = "\033[0;37;40m";
$italic = "\033[3;37;40m";
$etalic = "\033[0;37;40m";
$reset  = $white;
$host   = "litepick.io";

date_default_timezone_set('Africa/Harare');

$bot_info = [
    "" => "\n\n\n",
    "script" => "pick.io",
    "link" => "None",
    "tutor" => "None",
    "version" => "1.1",
    "Creator Message" => "By usage, you assume all risk."
];

try {
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
    //sleep(2);
    foreach ($bot_info as $key => $value) {
        if ($key == "") {
            echo $value;
        } else {
            echo ucfirst($key) . ": $value\n";
        }
    }
    echo "\n";
    //sleep(5);
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
} catch (Exception $e) {
    if ($e instanceof KeyboardInterrupt) {
        exit('Response: Exit Command Received');
    } else {
        echo "An error occurred: " . $e->getMessage();
    }
}
class KeyboardInterrupt extends Exception {}


function curl($url, $post = 0, $httpheader = 0, $proxy = 0){ // url, postdata, http headers, proxy, uagent
 while (true){
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
   curl_setopt($ch, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1_3);
   curl_setopt($ch, CURLOPT_SSL_CIPHER_LIST, 'TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256');
   curl_setopt($ch, CURLOPT_TIMEOUT, 60);
   curl_setopt($ch, CURLOPT_COOKIE,TRUE);
   curl_setopt($ch, CURLOPT_COOKIEFILE,"cookie.txt");
   curl_setopt($ch, CURLOPT_COOKIEJAR,"cookie.txt");
   if($post){
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    }
    if($httpheader){
      curl_setopt($ch, CURLOPT_HTTPHEADER, $httpheader);
    }
    if($proxy){
      curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, true);
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
      // curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    }
    curl_setopt($ch, CURLOPT_HEADER, true);
    $response = curl_exec($ch);
    $httpcode = curl_getinfo($ch);
    if(!$httpcode) return "Curl Error : ".curl_error($ch); else{
     $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     $body = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     curl_close($ch);
     if ($body == "") {
          echo "\rPlease Check Your Connection \r"; continue;} else { echo "                             \r";
          return array($header, $body);}
    }
  }}


function countdown($t) {
    while ($t > 0) {
        $mins = floor($t / 60);
        $secs = $t % 60;
        $timer = sprintf('%02dm:%02ds', $mins, $secs);
        $now = date('H:i:s'); //'H:i:s'
        echo "\r @[$now] left: $timer  \r";
        sleep(1);
        $t--;
    }
}

function Slow($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }
function Slo($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }

function Sav($namadata){
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
            }else{
                   usleep(1.5);
                   system("clear");
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
                 }
            return $data;
                 }

function Save($namadata)
   {
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
        }else{
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
             }
         return $data;
   }

function timer($timer){
      $tim = time()+$timer;
      while(true):
        echo "\r                          \r";$wsl=$wrn[$i];
        $tm = $tim-time();
        $date=date("i:s",$tm);
        if($tm<1){
          break;
        }
      endwhile;
    }

function load($data, $file)
         {
           $handle = fopen($file, 'w');fwrite($handle, $data);
           fclose($handle);
         }

function banner($name)
         { global $red ,$green ,$yellow ,$blue ,$purple ,$cyan ,$white ,$red ,$grey ,$mono ,$emono ,$italic ,$etalic ,$reset;
           echo "\n\rSIMPLE BOTS AND AUTO CLICKERS by 16(sixteen)";
           echo "\n\r$name FAUCET-ONLY PYTHON-PHP SCRIPT";}


$user=Sav($host."_USERAGENT");
$cookie=Sav($host."_COOKIE");
$apikey=Sav("MULTIBOT_API");

system('clear');
$headers = [
            "Host: $host",
            "x-requested-with:XMLHttpRequest",
            "referer: https://".$host."/faucet.php",
            "user-agent: $user",
            "accept: */*", //*/
            "cookie: $cookie",
           ];


function captcha($apikey, $sitekey, $url) {
    $apiUrl = "http://api.multibot.in/in.php?key=$apikey&method=hcaptcha&sitekey=$sitekey&pageurl=$url";

    $headers= [];
    $data = curl($apiUrl, 0, $headers)[1];
    if (strpos($data, "ERROR_WRONG_USER_KEY") !== false) {
        echo("Error: Wrong Multi Bot Api-Key\n");
        exit;
    }

    $id= trim(explode("OK|", $data)[1]);
    $waitsec = rand(80, 100);
    countdown($waitsec);

    for ($t = 0; $t < 10; $t++) {
        $data = curl("http://api.multibot.in/res.php?key=$apikey&id=$id", 0, $headers)[1];
        if (strpos($data, "OK|") !== false) {
            echo("\r Captcha Status: OK.            \r");
            sleep(2);
            $cap= trim(explode("OK|", $data)[1]);
            return $cap;
        } elseif (strpos($data, "CAPCHA_NOT_READY") !== false) {
            countdown(rand(20, 30));
        } else {
            echo "\r Error On Captcha: $data  ";
            sleep(2);
            //echo("\r  Something Went Wrong While Retrieving Captcha. \r");
            //break;
        }
    }
}


function login(){
         global $headers, $host;
         $url= "https://".$host."/faucet.php";
         $data= curl($url, 0, $headers)[1];
         //echo $data; exit;
         $username= explode('Hello ', explode('. Welcome back!', $data)[0])[1];
         if ($username == ""){
             echo "Bad User Data\n";
             unlink($host."_USERAGENT");
             unlink($host."_COOKIE");
             exit;}

         $balance= trim(explode('<span class="user_balance">', explode('</span> LTC', $data)[0])[1]);

         $x= date("H:i:s");
         echo ("\n\n\rUser: ".$username."  |  Balance: ".$balance." Ł \n");
         echo str_repeat("—", 49)."\n";
         //echo $data;
         //exit;
         }


function faucet(){
         global $headers, $host, $apikey, $user, $cookie;
         while (true) {
                 $url= "https://".$host."/faucet.php";
                 $request= curl($url, 0, $headers);
                 $cookies= $request[0];
                 $data= $request[1];

                 $payload= explode('data: "action=claim_hourly_faucet', explode('+getCookie("_ft")', $data)[0])[1];
                 $hash= explode("var hash = get_hash(event, '", explode("');
				
				$.ajax({", $data)[0])[1];

                 $sitekey= explode("var params = {
			\"sitekey\": '", explode("',
		};
		hCaptchaBox ", $data)[0])[1];

   	         $cookies= $request[0];
                 try {
                       $secs= explode('$("input[type=radio][name=faucet_type]").on("change", change_faucet_type);
				show_countdown_clock(', explode(".then(r => r.text())", $data)[0])[1];
                       $secs= explode(');', $secs)[0];
                       if ($secs>=1) {
                       countdown($secs);
                       continue;}
                       //foreach (range(0, $secs) as $i) {reward_increaser(.0001, $progress);}
                 } catch (Exception $e) {}

	         $headers = [
	            "Host: $host",
	            "x-requested-with:XMLHttpRequest",
	            "user-agent: $user",
	            "accept: */*", //*/
	            //"Accept-Encoding: gzip, deflate, br",
	            "Accept-Language: en-US,en;q=0.9",
	            "origin: https://$host",
	            "referer: https://$host/faucet.php",
	            "content-type: application/x-www-form-urlencoded",
	            "cookie: $cookie",
		           ];

	         //$seconds= explode('', explode('', $data)[0])[1];
	         //explode('', explode('', $data)[0])[1];
	         $csrf_token= explode('csrf_cookie_name=', explode('; expires=', $cookies)[0])[1];
	         //echo "csrf_token- $csrf_token \n";             exit;
	         $recaptcha= captcha($apikey, $sitekey, $url);
                 if ($recaptcha == "") {continue;}
                 else {
	                $payload= "action=claim_hourly_faucet&hash=$hash&captcha_type=2&g-recaptcha-response=null&h-captcha-response=$recaptcha&_iconcaptcha-token=&ic-rq=&ic-wid=&ic-cid=&ic-hp=&c_captcha_response=null&csrf_test_name=$csrf_token";
	                //$payload= "action=claim_hourly_faucet&hash=$hash&captcha_type=2&g-recaptcha-response=null&h-captcha-response=$recaptcha&_iconcaptcha-token=&ic-rq=&ic-wid=&ic-cid=&ic-hp=&c_captcha_response=null&csrf_test_name=$csrf_token";
	                //$payload= "action=claim_hourly_faucet&hash=BlRdCANWBQwEAQYDVAVUBQEI&captcha_type=2&g-recaptcha-response=null&h-captcha-response=$recaptcha&_iconcaptcha-token=&ic-rq=&ic-wid=&ic-cid=&ic-hp=&c_captcha_response=null&ft=&csrf_test_name=$csrf_token";

	                $url= "https://$host/process.php";
	                $request= curl($url, $payload, $headers);
	                $reqdata= $request[1];

   	                $cookies= $request[0];
	                $resdata= json_decode($reqdata, true);

	                if ($resdata['ret'] == 1) {
	                     $x = date('H:i:s');
	                     $number = $resdata['num'];
	                     $won = explode('You got ', explode(' LTC!"', $reqdata)[0])[1];
	                     $balance = $resdata['balance']/100000000;

echo "\r ". str_pad("$x ─ $number", 12, '   ', STR_PAD_RIGHT)
."    ". str_pad("+$won   ", 12, '   ', STR_PAD_RIGHT)
."  ". str_pad("$balance Ł", 6, ' ', STR_PAD_RIGHT)
. "\n";}


	                elseif ($resdata['ret'] == 0) {
	                     $msg= $resdata['mes'];
	                     $x = date('H:i:s');
                             // echo "\r$x - Error On Claim: $msg \n";
                             continue;
	                     if (strpos($msg, "Please try again in 10 minutes") !== false){
	                         countdown(610);
	                        }}
	                 else {
	                        $x = date('H:i:s');
	                        //echo "\r$x - Error2: $reqdata\n";
		                   }}
		                     	}}



function choose_action() {
        login();
        while (true){faucet();}
                                }

choose_action(); ?>


