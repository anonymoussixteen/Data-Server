<?php

error_reporting(0);
//unlink('.img');
$red    = "\033[1;31;40m";
$green  = "\033[1;32;40m";
$yellow = "\033[1;33;40m";
$blue   = "\033[1;34;40m";
$purple = "\033[1;35;40m";
$cyan   = "\033[1;36;40m";
$white  = "\033[1;37;40m";
$red    = "\033[1;31;40m";
$grey   = "\033[1;30;40m";
$mono   = "\033[2;37;40m";
$emono  = "\033[0;37;40m";
$italic = "\033[3;37;40m";
$etalic = "\033[0;37;40m";
$reset  = $white;
$host   = "litepick.io";

date_default_timezone_set('Africa/Harare');

$bot_info = [
    "" => "\n\n\n",
    "script" => "pick.io",
    "link" => "https://litepick.io/?ref=masterrashy",
    "tutor" => "None",
    "version" => "1.1",
    "Creator Message" => "By usage, you assume all risk."
];

try {
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
    sleep(2);
    foreach ($bot_info as $key => $value) {
        if ($key == "") {
            echo $value;
        } else {
            echo ucfirst($key) . ": $value\n";
        }
    }
    echo "\n";
    sleep(5);
    system('clear'); // For Linux/Mac
    // system('cls'); // For Windows
} catch (Exception $e) {
    if ($e instanceof KeyboardInterrupt) {
        exit('Response: Exit Command Received');
    } else {
        echo "An error occurred: " . $e->getMessage();
    }
}
class KeyboardInterrupt extends Exception {}


function curl($url, $post = 0, $httpheader = 0, $proxy = 0){ // url, postdata, http headers, proxy, uagent
 while (true){
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
   curl_setopt($ch, CURLOPT_TIMEOUT, 60);
   curl_setopt($ch, CURLOPT_COOKIE,TRUE);
   curl_setopt($ch, CURLOPT_COOKIEFILE,"cookie.txt");
   curl_setopt($ch, CURLOPT_COOKIEJAR,"cookie.txt");
   if($post){
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    }
    if($httpheader){
      curl_setopt($ch, CURLOPT_HTTPHEADER, $httpheader);
    }
    if($proxy){
      curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, true);
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
      // curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    }
    curl_setopt($ch, CURLOPT_HEADER, true);
    $response = curl_exec($ch);
    $httpcode = curl_getinfo($ch);
    if(!$httpcode) return "Curl Error : ".curl_error($ch); else{
     $header = substr($response, 0, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     $body = substr($response, curl_getinfo($ch, CURLINFO_HEADER_SIZE));
     curl_close($ch);
     if ($body == "") {
          echo "\rPlease Check Your Connection \r"; continue;} else { echo "                             \r";
          return array($header, $body);}
    }
  }}


function countdown($t) {
    while ($t > 0) {
        $mins = floor($t / 60);
        $secs = $t % 60;
        $timer = sprintf('%02dm:%02ds', $mins, $secs);
        $now = date('H:i:s'); //'H:i:s'
        echo "\r @[$now] left: $timer  \r";
        sleep(1);
        $t--;
    }
}

function Slow($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }
function Slo($msg)
         {$slow = str_split($msg);
          foreach( $slow as $slowmo )
                   {echo $slowmo;
                    usleep(555);}
         }

function Sav($namadata){
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
            }else{
                   usleep(1.5);
                   system("clear");
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
                 }
            return $data;
                 }

function Save($namadata)
   {
         if(file_exists($namadata)){
            $data = file_get_contents($namadata);
        }else{
            $data = readline("  ".$namadata." :  ");
            file_put_contents($namadata,$data);
             }
         return $data;
   }

function timer($timer){
      $tim = time()+$timer;
      while(true):
        echo "\r                          \r";$wsl=$wrn[$i];
        $tm = $tim-time();
        $date=date("i:s",$tm);
        if($tm<1){
          break;
        }
      endwhile;
    }

function load($data, $file)
         {
           $handle = fopen($file, 'w');fwrite($handle, $data);
           fclose($handle);
         }


$user=Sav($host."_USERAGENT");
$cookie=Sav($host."_COOKIE");
$apikey=Sav("Apikey");

system('clear');
$headers = [
            "Host: $host",
            "x-requested-with:XMLHttpRequest",
            "referer: https://".$host."/faucet.php",
            "user-agent: $user",
            "accept: */*", //*/
            "cookie: $cookie",
           ];

function captcha($apikey, $sitekey, $url) {
    $apiUrl = "http://api.multibot.in/in.php?key=$apikey&method=hcaptcha&sitekey=$sitekey&pageurl=$url";

    $headers= [];
    $data = curl($apiUrl, 0, $headers)[1];
    if (strpos($data, "ERROR_WRONG_USER_KEY") !== false) {
        echo("Error: Wrong Multi Bot Api-Key\n");
        exit;
    }

    $id= trim(explode("OK|", $data)[1]);
    $waitsec = rand(80, 100);
    countdown($waitsec);

    for ($t = 0; $t < 10; $t++) {
        $data = curl("http://api.multibot.in/res.php?key=$apikey&id=$id", 0, $headers)[1];
        if (strpos($data, "OK|") !== false) {
            echo("\r Captcha Status: OK.            \r");
            sleep(2);
            $cap= trim(explode("OK|", $data)[1]);
            return $cap;
        } elseif (strpos($data, "CAPCHA_NOT_READY") !== false) {
            countdown(rand(20, 30));
        } else {
            echo "Error: $data\n"; exit;
            //echo("\r  Something Went Wrong While Retrieving Captcha. \r");
            break;
        }
    }
}


function login(){
         global $headers, $host;
         $url= "https://".$host."/faucet.php";
         $data= curl($url, 0, $headers)[1];
         $username= explode('Hello ', explode('. Welcome back!', $data)[0])[1];
         if ($username == ""){
             echo "Bad User Data\n";
             unlink($host."_USERAGENT");
             unlink($host."_COOKIE");
             exit;}
         $percent= explode('<div class="progress-bar" role="progressbar" id="wagering_progress" style="width: ', explode('; background-color: #8bc34a;" aria-valuenow="25" aria-valuemin="0"', $data)[0])[1];
         $balance= trim(explode('<span class="user_balance">', explode('</span> LTC', $data)[0])[1]);
         $level= explode('margin-left: 10px">', explode('</div><div style="float: right; margin-right: 10px">', $data)[0])[1];
         $wagered= explode('<p style="margin-bottom: 0px">Wagered: <b id="total_wagered">',explode('</b> / Target: <b id="wagering_target">', $data)[0])[1];
         $target= intval(explode('</b> / Target: <b id="wagering_target">', explode('</b></p>', $data)[0])[1]);

         $x= date("H:i:s");
         echo ("\n\n\rUser: ".$username."\n");
         echo ("\rBalance: ".$balance." LTC \n");
         echo ("\rWager Progress: $level [$wagered /$target @$percent]\n");
         echo str_repeat("—", 49)."\n";
         // echo $data; exit;
         }


function faucet(){
         global $headers, $host, $apikey, $user, $cookie;
         while (true) {
                 $url= "https://".$host."/faucet.php";
                 $request= curl($url, 0, $headers);
                 $data= $request[1];

                 $payload= explode('data: "action=claim_hourly_faucet', explode('+getCookie("_ft")', $data)[0])[1];
                 $sitekey= explode('var params = {
			"sitekey": \'', explode('\',
		};', $data)[0])[1];

                 $percent= explode('<div class="progress-bar" role="progressbar" id="wagering_progress" style="width: ', explode('; background-color: #8bc34a;" aria-valuenow="25" aria-valuemin="0"', $data)[0])[1];
                 $level= explode('margin-left: 10px">', explode('</div><div style="float: right; margin-right: 10px">', $data)[0])[1];
                 $wagered= intval(explode('<p>Wagered: <b id="total_wagered">',explode('</b> / Target: <b', $data)[0])[1]);
                 $target= intval(explode('</b> / Target: <b id="wagering_target">', explode('</b></p>', $data)[0])[1]);
                 $hash= explode('var hash = get_hash(event, \'', explode("');
				
				$.ajax({", $data)[0])[1];
   	         $cookies= $request[0];
                 try {
                       $secs= explode('$("input[type=radio][name=faucet_type]").on("change", change_faucet_type);
				show_countdown_clock(', explode(".then(r => r.text())", $data)[0])[1];
                       $secs= explode(');', $secs)[0];
                       countdown($secs);
                       //foreach (range(0, $secs) as $i) {reward_increaser(.0001, $progress);}
                 } catch (Exception $e) {}

	         $headers = [
	            "Host: $host",
	            "x-requested-with:XMLHttpRequest",
	            "user-agent: $user",
	            "accept: */*", //*/
	            "referer: https://$host/faucet.php",
	            "content-type: application/x-www-form-urlencoded; charset=UTF-8",
	            "cookie: $cookie",
		           ];

	         //$seconds= explode('', explode('', $data)[0])[1];
	         //explode('', explode('', $data)[0])[1];
	         $csrf_token= explode('csrf_cookie_name=', explode('; expires=', $cookies)[0])[1];
	         $recaptcha= captcha($apikey, $sitekey, $url);
                 if ($recaptcha == "") {continue;}
                 else {
                        $payload= "action=claim_hourly_faucet&hash=$hash&captcha_type=2&g-recaptcha-response=null&h-captcha-response=$recaptcha&captcha=&csrf_test_name=$csrf_token";
	                $url= "https://$host/process.php";
	                $request= curl($url, $payload, $headers);
	                $reqdata= $request[1];

   	                $cookies= $request[0];
	                $resdata= json_decode($reqdata, true);

	                if ($resdata['ret'] == 1) {
	                     $x = date('H:i:s');
	                     $number = $resdata['num'];
	                     $won = $resdata['mes'];
	                     $balance = $resdata['balance'];

	                     echo "\r$x - Lucky Number: $number   \n";
	                     echo "         - Won: $won   \n";
	                     echo "         - Balance: " . number_format($balance / 100000000, 8) . "   \n";
	                     echo "         - Wager Progress: $level [$wagered/$target @$percent]\n";
	                     echo str_repeat('—', 47) . "\n";}

	                elseif ($resdata['ret'] == 0) {
	                     $msg= $resdata['mes'];
	                     $x = date('H:i:s');
                             //echo "\r$x - Error: $msg\n";
	                     if (strpos($msg, "Please try again in 10 minutes") !== false){
	                         countdown(1200);
	                        }}
	                 else {
	                        $x = date('H:i:s');
	                        //echo "\r$x - Error2: $reqdata\n";
		                   }}
		                     	}}

function reward_increaser($wager) {
    global $host, $apikey, $cookie, $user, $headers;
    global $red, $green, $yellow, $blue, $purple, $cyan, $white, $grey, $mono, $emono, $italic, $etalic, $reset;

    $max_consecutive_losses = 13;
    $consecutive_losses = 0;
    $bet_amount = $wager;
    $last_result = null;
    $lowi= 0;
    $url = "https://$host/dice.php";

    $data= curl($url, 0, $headers)[1];
    $balance1= trim(explode('<span class="user_balance">', explode('</span> LTC', $data)[0])[1]);

    $headers = [
        "Host: $host",
        "x-requested-with: XMLHttpRequest",
        "user-agent: $user",
        "accept: */*", //*/
        "referer: https://$host/dice.php",
        "content-type: application/x-www-form-urlencoded; charset=UTF-8",
        "cookie: $cookie"
    ];
    while (true) {
    for ($i = 0; $i < 5000; $i++) {
        $csrf_token = explode('csrf_cookie_name=', explode('; expires=', $cookies)[0])[1];

        $choices = array('high', 'low');
        $bet = $choices[array_rand($choices)];

        $payload = 'action=bet_game_dice&bet_amount=' . $bet_amount . '&payout=2&bet_on=' . $bet . 'er&csrf_test_name=' . $csrf_token;

        $url = "https://$host/process.php";
        $posdata = curl($url, $payload, $headers);
        $resdata = $posdata[1];
        $cookies = $posdata[0];

        if (strpos($resdata, '{"ret":1') !== false) {
            $number = explode('"num":"', explode('","amount":', $resdata)[0])[1];
            $lowi = explode('"amount":', explode(',"balance"', $resdata)[0])[1];
            $balance = number_format(intval(explode(',"balance":', explode(',"bet_data":', $resdata)[0])[1]) / 100000000, 8);
            $profit = number_format($balance - $balance1, 8);

            if (floatval($lowi) > -1) {
                echo "\r " . $green . str_pad($number, 8, ' ', STR_PAD_LEFT) . $reset . " | " . str_pad($lowi, 15, ' ', STR_PAD_LEFT) . " |      " . $cyan.$balance. $reset. "   \n";
                $consecutive_losses = 0;
                $bet_amount = $wager;
                $last_result = 'win';
                $lowi++;

            } else {
                echo "\r " . $red . str_pad($number, 8, ' ', STR_PAD_LEFT) . $reset . " | " . str_pad($lowi, 15, ' ', STR_PAD_LEFT) . " |      " . $cyan .$balance. $reset . "   \n";
                $consecutive_losses++;
                $multiplier_adv= array(8, 10, 100);
                $adv = 1/$multiplier_adv[array_rand($multiplier_adv)];
                $bet_amount*= 2;
                $last_result = 'loss';

                if ($consecutive_losses >= $max_consecutive_losses) {
                    echo str_repeat("—", 49)."\n";
                    countdown(320);
                    $bet_amount = $wager;
                    $consecutive_losses = 0;
                    $lowi++;
                }
            }
            echo "\r" . str_pad($i, 27, ' ', STR_PAD_LEFT) ." |      ". $profit . "   \r";
            usleep(1000);
        }
    }
    echo "\rBetting Stopped: On 1hour Refresh            \n";
    countdown(3600);
}}


function choose_action() {
    echo "Choose an action:\n";
    echo "1. Wagering\n";
    echo "2. Faucet\n";
    echo "Enter Number (1-2): ";
    $choice = trim(fgets(STDIN));
    system('clear');
    unlink('cookie.txt');

    if ($choice == '1') {
        login();
        $amount = .00000002; //trim(fgets(STDIN)); echo "Enter the amount for Reward Increaser: ";
        reward_increaser($amount);
    } elseif ($choice == '2') {
        login();
        faucet();
    } else {
        echo "Invalid choice.\n";
    }
}

choose_action(); ?>

